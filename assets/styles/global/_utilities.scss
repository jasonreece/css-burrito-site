// - - - - - - - - - - - - - - - - - - -
// - - utilities
// placeholders extends, mixins, functions, and utility classes


// - - - - - - - - - - - - - - - - - - -
// - - placeholder extends


// - - - - - - - - - - - - - - - - - - -
// - - mixins

// - - breakpoint
// adds responsive breakpoints.
@mixin breakpoint($width) {
  @media (min-width: $width) {
    @content;
  }
}

// - - attention
// adds accessibility pseudo selectors to hover states.
@mixin attention() {
  &:hover,
  &:active,
  &:focus {
    @content;
  }
}

// - - - - - - - - - - - - - - - - - - -
// - - functions

// map get on nested lists
// usage: @each $key, $value in map-deep-get($fonts, 'font-size-multiplier') {...}
// returns: (large: 3, medium: 1.5 , small: 0.75)
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

// grab breakpoint from $breakpoints map
@function bp($key) {
  @if map-has-key($breakpoints, $key) {
    @return map-get($breakpoints, $key);
  }

  @warn "Unknown `#{$key}` in $breakpoints.";

  @return null;
}

// sets font-family with key from the roboto list
// usage: font-family: roboto('thin');
// returns: "Roboto-Thin", sans-serif
@function roboto($key) {
  $font: map-deep-get($fonts, 'font-family', 'roboto');

  @if map-has-key($font, $key) {
    @return map-get($font, $key);
  }

  @warn "Unknown `#{$key}` in $fonts.";

  @return null;
}

// sets font-family with key from the aileron list
// usage: font-family: aileron('thin');
// returns: "Aileron-Thin", sans-serif
@function anonymous($key) {
  $font: map-deep-get($fonts, 'font-family', 'anonymous-pro');

  @if map-has-key($font, $key) {
    @return map-get($font, $key);
  }

  @warn "Unknown `#{$key}` in $fonts.";

  @return null;
}

// - - - - - - - - - - - - - - - - - - -
// - - utilities
